<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="3" failures="0" skipped="0" tests="3" time="1.210" timestamp="2024-06-19T22:19:02.883406" hostname="32997da6b0c6"><testcase classname="tests.test_prediction" name="test_single_pred_not_none" time="0.015"><error message="failed on setup with &quot;ValueError: The feature names should match those that were passed during fit.&#10;Feature names unseen at fit time:&#10;- Loan_ID&quot;">@pytest.fixture
    def single_prediction():
        test_dataset = load_datasets(config.TEST_FILE)
        single_row = test_dataset
&gt;       result = generate_prediction(single_row)

tests/test_prediction.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
prediction_model/predict.py:19: in generate_prediction
    prediction = classification_pipeline.predict(data)
/usr/local/lib/python3.10/site-packages/sklearn/pipeline.py:480: in predict
    Xt = transform.transform(Xt)
/usr/local/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/sklearn/preprocessing/_data.py:508: in transform
    X = self._validate_data(
/usr/local/lib/python3.10/site-packages/sklearn/base.py:548: in _validate_data
    self._check_feature_names(X, reset=reset)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MinMaxScaler()
X =       Loan_ID  Gender  Married  ...  Loan_Amount_Term  Credit_History  Property_Area
0    LP001015       1        1  ....        0
361  LP002989       1        0  ...             180.0               1              0

[362 rows x 11 columns]

    def _check_feature_names(self, X, *, reset):
        """Set or check the `feature_names_in_` attribute.
    
        .. versionadded:: 1.0
    
        Parameters
        ----------
        X : {ndarray, dataframe} of shape (n_samples, n_features)
            The input samples.
    
        reset : bool
            Whether to reset the `feature_names_in_` attribute.
            If False, the input will be checked for consistency with
            feature names of data provided when reset was last True.
            .. note::
               It is recommended to call `reset=True` in `fit` and in the first
               call to `partial_fit`. All other methods that validate `X`
               should set `reset=False`.
        """
    
        if reset:
            feature_names_in = _get_feature_names(X)
            if feature_names_in is not None:
                self.feature_names_in_ = feature_names_in
            elif hasattr(self, "feature_names_in_"):
                # Delete the attribute when the estimator is fitted on a new dataset
                # that has no feature names.
                delattr(self, "feature_names_in_")
            return
    
        fitted_feature_names = getattr(self, "feature_names_in_", None)
        X_feature_names = _get_feature_names(X)
    
        if fitted_feature_names is None and X_feature_names is None:
            # no feature names seen in fit and in X
            return
    
        if X_feature_names is not None and fitted_feature_names is None:
            warnings.warn(
                f"X has feature names, but {self.__class__.__name__} was fitted without"
                " feature names"
            )
            return
    
        if X_feature_names is None and fitted_feature_names is not None:
            warnings.warn(
                "X does not have valid feature names, but"
                f" {self.__class__.__name__} was fitted with feature names"
            )
            return
    
        # validate the feature names against the `feature_names_in_` attribute
        if len(fitted_feature_names) != len(X_feature_names) or np.any(
            fitted_feature_names != X_feature_names
        ):
            message = (
                "The feature names should match those that were passed during fit.\n"
            )
            fitted_feature_names_set = set(fitted_feature_names)
            X_feature_names_set = set(X_feature_names)
    
            unexpected_names = sorted(X_feature_names_set - fitted_feature_names_set)
            missing_names = sorted(fitted_feature_names_set - X_feature_names_set)
    
            def add_names(names):
                output = ""
                max_n_names = 5
                for i, name in enumerate(names):
                    if i &gt;= max_n_names:
                        output += "- ...\n"
                        break
                    output += f"- {name}\n"
                return output
    
            if unexpected_names:
                message += "Feature names unseen at fit time:\n"
                message += add_names(unexpected_names)
    
            if missing_names:
                message += "Feature names seen at fit time, yet now missing:\n"
                message += add_names(missing_names)
    
            if not missing_names and not unexpected_names:
                message += (
                    "Feature names must be in the same order as they were in fit.\n"
                )
    
&gt;           raise ValueError(message)
E           ValueError: The feature names should match those that were passed during fit.
E           Feature names unseen at fit time:
E           - Loan_ID

/usr/local/lib/python3.10/site-packages/sklearn/base.py:481: ValueError</error></testcase><testcase classname="tests.test_prediction" name="test_single_pred_str_type" time="0.014"><error message="failed on setup with &quot;ValueError: The feature names should match those that were passed during fit.&#10;Feature names unseen at fit time:&#10;- Loan_ID&quot;">@pytest.fixture
    def single_prediction():
        test_dataset = load_datasets(config.TEST_FILE)
        single_row = test_dataset
&gt;       result = generate_prediction(single_row)

tests/test_prediction.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
prediction_model/predict.py:19: in generate_prediction
    prediction = classification_pipeline.predict(data)
/usr/local/lib/python3.10/site-packages/sklearn/pipeline.py:480: in predict
    Xt = transform.transform(Xt)
/usr/local/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/sklearn/preprocessing/_data.py:508: in transform
    X = self._validate_data(
/usr/local/lib/python3.10/site-packages/sklearn/base.py:548: in _validate_data
    self._check_feature_names(X, reset=reset)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MinMaxScaler()
X =       Loan_ID  Gender  Married  ...  Loan_Amount_Term  Credit_History  Property_Area
0    LP001015       1        1  ....        0
361  LP002989       1        0  ...             180.0               1              0

[362 rows x 11 columns]

    def _check_feature_names(self, X, *, reset):
        """Set or check the `feature_names_in_` attribute.
    
        .. versionadded:: 1.0
    
        Parameters
        ----------
        X : {ndarray, dataframe} of shape (n_samples, n_features)
            The input samples.
    
        reset : bool
            Whether to reset the `feature_names_in_` attribute.
            If False, the input will be checked for consistency with
            feature names of data provided when reset was last True.
            .. note::
               It is recommended to call `reset=True` in `fit` and in the first
               call to `partial_fit`. All other methods that validate `X`
               should set `reset=False`.
        """
    
        if reset:
            feature_names_in = _get_feature_names(X)
            if feature_names_in is not None:
                self.feature_names_in_ = feature_names_in
            elif hasattr(self, "feature_names_in_"):
                # Delete the attribute when the estimator is fitted on a new dataset
                # that has no feature names.
                delattr(self, "feature_names_in_")
            return
    
        fitted_feature_names = getattr(self, "feature_names_in_", None)
        X_feature_names = _get_feature_names(X)
    
        if fitted_feature_names is None and X_feature_names is None:
            # no feature names seen in fit and in X
            return
    
        if X_feature_names is not None and fitted_feature_names is None:
            warnings.warn(
                f"X has feature names, but {self.__class__.__name__} was fitted without"
                " feature names"
            )
            return
    
        if X_feature_names is None and fitted_feature_names is not None:
            warnings.warn(
                "X does not have valid feature names, but"
                f" {self.__class__.__name__} was fitted with feature names"
            )
            return
    
        # validate the feature names against the `feature_names_in_` attribute
        if len(fitted_feature_names) != len(X_feature_names) or np.any(
            fitted_feature_names != X_feature_names
        ):
            message = (
                "The feature names should match those that were passed during fit.\n"
            )
            fitted_feature_names_set = set(fitted_feature_names)
            X_feature_names_set = set(X_feature_names)
    
            unexpected_names = sorted(X_feature_names_set - fitted_feature_names_set)
            missing_names = sorted(fitted_feature_names_set - X_feature_names_set)
    
            def add_names(names):
                output = ""
                max_n_names = 5
                for i, name in enumerate(names):
                    if i &gt;= max_n_names:
                        output += "- ...\n"
                        break
                    output += f"- {name}\n"
                return output
    
            if unexpected_names:
                message += "Feature names unseen at fit time:\n"
                message += add_names(unexpected_names)
    
            if missing_names:
                message += "Feature names seen at fit time, yet now missing:\n"
                message += add_names(missing_names)
    
            if not missing_names and not unexpected_names:
                message += (
                    "Feature names must be in the same order as they were in fit.\n"
                )
    
&gt;           raise ValueError(message)
E           ValueError: The feature names should match those that were passed during fit.
E           Feature names unseen at fit time:
E           - Loan_ID

/usr/local/lib/python3.10/site-packages/sklearn/base.py:481: ValueError</error></testcase><testcase classname="tests.test_prediction" name="test_single_pred_validate" time="0.013"><error message="failed on setup with &quot;ValueError: The feature names should match those that were passed during fit.&#10;Feature names unseen at fit time:&#10;- Loan_ID&quot;">@pytest.fixture
    def single_prediction():
        test_dataset = load_datasets(config.TEST_FILE)
        single_row = test_dataset
&gt;       result = generate_prediction(single_row)

tests/test_prediction.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
prediction_model/predict.py:19: in generate_prediction
    prediction = classification_pipeline.predict(data)
/usr/local/lib/python3.10/site-packages/sklearn/pipeline.py:480: in predict
    Xt = transform.transform(Xt)
/usr/local/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/sklearn/preprocessing/_data.py:508: in transform
    X = self._validate_data(
/usr/local/lib/python3.10/site-packages/sklearn/base.py:548: in _validate_data
    self._check_feature_names(X, reset=reset)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MinMaxScaler()
X =       Loan_ID  Gender  Married  ...  Loan_Amount_Term  Credit_History  Property_Area
0    LP001015       1        1  ....        0
361  LP002989       1        0  ...             180.0               1              0

[362 rows x 11 columns]

    def _check_feature_names(self, X, *, reset):
        """Set or check the `feature_names_in_` attribute.
    
        .. versionadded:: 1.0
    
        Parameters
        ----------
        X : {ndarray, dataframe} of shape (n_samples, n_features)
            The input samples.
    
        reset : bool
            Whether to reset the `feature_names_in_` attribute.
            If False, the input will be checked for consistency with
            feature names of data provided when reset was last True.
            .. note::
               It is recommended to call `reset=True` in `fit` and in the first
               call to `partial_fit`. All other methods that validate `X`
               should set `reset=False`.
        """
    
        if reset:
            feature_names_in = _get_feature_names(X)
            if feature_names_in is not None:
                self.feature_names_in_ = feature_names_in
            elif hasattr(self, "feature_names_in_"):
                # Delete the attribute when the estimator is fitted on a new dataset
                # that has no feature names.
                delattr(self, "feature_names_in_")
            return
    
        fitted_feature_names = getattr(self, "feature_names_in_", None)
        X_feature_names = _get_feature_names(X)
    
        if fitted_feature_names is None and X_feature_names is None:
            # no feature names seen in fit and in X
            return
    
        if X_feature_names is not None and fitted_feature_names is None:
            warnings.warn(
                f"X has feature names, but {self.__class__.__name__} was fitted without"
                " feature names"
            )
            return
    
        if X_feature_names is None and fitted_feature_names is not None:
            warnings.warn(
                "X does not have valid feature names, but"
                f" {self.__class__.__name__} was fitted with feature names"
            )
            return
    
        # validate the feature names against the `feature_names_in_` attribute
        if len(fitted_feature_names) != len(X_feature_names) or np.any(
            fitted_feature_names != X_feature_names
        ):
            message = (
                "The feature names should match those that were passed during fit.\n"
            )
            fitted_feature_names_set = set(fitted_feature_names)
            X_feature_names_set = set(X_feature_names)
    
            unexpected_names = sorted(X_feature_names_set - fitted_feature_names_set)
            missing_names = sorted(fitted_feature_names_set - X_feature_names_set)
    
            def add_names(names):
                output = ""
                max_n_names = 5
                for i, name in enumerate(names):
                    if i &gt;= max_n_names:
                        output += "- ...\n"
                        break
                    output += f"- {name}\n"
                return output
    
            if unexpected_names:
                message += "Feature names unseen at fit time:\n"
                message += add_names(unexpected_names)
    
            if missing_names:
                message += "Feature names seen at fit time, yet now missing:\n"
                message += add_names(missing_names)
    
            if not missing_names and not unexpected_names:
                message += (
                    "Feature names must be in the same order as they were in fit.\n"
                )
    
&gt;           raise ValueError(message)
E           ValueError: The feature names should match those that were passed during fit.
E           Feature names unseen at fit time:
E           - Loan_ID

/usr/local/lib/python3.10/site-packages/sklearn/base.py:481: ValueError</error></testcase></testsuite></testsuites>